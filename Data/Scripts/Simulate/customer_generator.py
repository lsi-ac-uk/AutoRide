"""
    This script generates fake information about customer using 'Fake' library.
    It creates first name, last name, date of birth, address, zip code, email, phone number, and join date

    We used a Fake and Geopy library to create the functions needed to generate information about the customer.
    Fake Library help us to create names and surnames, and for a variety of names we generate names in English, Indian,
    Danish, French, and Italian names.
    The email creation format is 'first_name.last_name@' and a valid domain such as 'gmail, hotmail etc.' is
    created randomly by Fake Library.

    Geopy library was used to create random addresses for users in the London area.
    The postcode is created by the Fake Library and for each user in a unique way.
    The phone number is created uniquely for each customer based on the '"+44 #### #######"'format
    and using the Fake Library.
    The customer's date of birth is considered from 18 to 110 years old and is randomly generated by Fake Library.
    The customer's join date is defined as follows:
        If the customer is between 18 and 22, a random date will be generated for them in the current year.
        If the customer is between 23 and 26-year-olds,
        a random date between the current year and -1, -2, -3 year ago will be generated.
        If the customer is between 27 and 30 years old,
        a random date between the current year and -3, -4, -5, -6, or -7 years ago will be generated.
        If the customer is over 30 years old, a random date between the current year and -1,
        -2, -3, or -5 years ago will be generated for them.

    Dependencies:
        - fake library (install using 'pip install fake')

"""

import datetime
import random

from faker import Faker

from helper_functions import generate_location, generate_date_time

# Initialize Faker with localized countries. (To create more diverse names and surnames)
fake = Faker(['en_GB', 'en_IN', 'it_IT', 'fr_FR', 'dk_DK'])


def generate_customer() -> tuple:
    """
    ،اThis function generates first name, lastname, and email for customer

    :return:
    tuple
        A tuple contain first_name, last_name, and email_address
    """
    first_name = fake.first_name()
    last_name = fake.last_name()
    email_address = first_name.lower() + "." + last_name.lower() + "@" + fake.free_email_domain()

    return first_name, last_name, email_address


def generate_address(latitude: float, longitude: float, geolocator) -> str:
    """
    This function generates fake address. It helps geopy lib for this reason.

    Parameters
    ----------
    latitude : float
    longitude : float
    geolocator: geopy.geocoders.nominatim.Nominatim

    Returns
    -------
    Address : str
        Fake address
    """

    location_address = geolocator.reverse(f"{latitude}, {longitude}")
    return location_address.address


def generate_postcode() -> str:
    """
    This function generate fake unique post code.

    Returns
    -------
    postcode : str
        Fake unique postcode.
    """
    fake_postcode = Faker("en_UK")
    return fake_postcode.unique.postcode()


def generate_phone_number() -> str:
    """
    This function uses a fake library to generate unique fake phone number of London area.

    Returns
    -------
    phone number: str
        A fake unique phone number.
    """
    template = "+44 #### #######"
    return fake.pystr_format(template, fake.unique.phone_number())


def generate_date_of_birth(min_age: int = 18, max_age: int = 110) -> datetime:
    """
    This function generates birthdate.

    Parameters
    ----------
    min_age: int
        Minimum age to generate.
    max_age:
        Maximum age to generate.

    Returns
    -------
    birthdate: str
        Fake birthdate
    """
    return fake.date_of_birth(minimum_age=min_age, maximum_age=max_age)


def calculate_age(born: datetime) -> int:
    """
    This function calculates age based on birthdate

    Parameters
    ----------
    born : datetime
        Birthdate

    Returns
    -------
    age : int
        age of the customer
    """

    today = datetime.date.today()
    return today.year - born.year - ((today.month, today.day) < (born.month, born.day))


def generate_customer_info_dict(customer_id: int) -> dict:
    """
    This function generates a dictionary of fake customer information.

    Parameters
    ----------
    customer_id: int
        An id generated for customer (primary key)

    Returns
    -------
    A dictionary contains customer information
    """

    name, family, email = generate_customer()
    birth_date = generate_date_of_birth()
    age = calculate_age(birth_date)
    customer_location = generate_location()
    customer_address = generate_address(customer_location[0], customer_location[1], customer_location[2])
    phone = generate_phone_number()
    post_code = generate_postcode()

    # try to generate join date greater than the birthdate of customers.
    if 18 <= age <= 22:
        date_of_join = fake.date_time_this_year()
    elif 23 <= age <= 26:
        date_of_join = generate_date_time(start_date=random.choice(["-1y", "-2y", "-3y"]))
    elif 27 <= age <= 30:
        date_of_join = generate_date_time(start_date=random.choice(["-3y", "-4y", "-5y", "-2y", "-7y"]))
    else:

        date_of_join = generate_date_time(start_date=random.choice(["-10y", "-3y", "-6y", "-5y", "-7y"]))

    return {
        "id": customer_id,
        "first_name": name,
        "last_name": family,
        "date_of_birth": birth_date,
        "email": email,
        "phone": phone,
        "address": customer_address,
        "postcode": post_code,
        "join_date": date_of_join
    }


if __name__ == "__main__":
    test_customer = generate_customer_info_dict(1)

